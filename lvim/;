------------------------
-- Treesitter
------------------------
lvim.builtin.treesitter.ensure_installed = {
  "go",
  "gomod",
}

------------------------
-- Plugins
------------------------
lvim.plugins = {
  "olexsmir/gopher.nvim",
  "leoluz/nvim-dap-go",
  "neovim/nvim-lspconfig",
  "ray-x/go.nvim",
  "fatih/vim-go",
  "sindrets/diffview.nvim",
  "ray-x/lsp_signature.nvim",
  "terryma/vim-multiple-cursors",
  {
    "akinsho/git-conflict.nvim",
    config = function()
      require('git-conflict').setup({
      default_mappings = true, -- disable buffer local mapping created by this plugin
      default_commands = true, -- disable commands created by this plugin
      disable_diagnostics = false, -- This will disable the diagnostics in a buffer whilst it is conflicted
      list_opener = 'copen', -- command or function to open the conflicts list
      highlights = { -- They must have background color, otherwise the default color will be used
        incoming = 'DiffAdd',
        current = 'DiffText',
      }
      })
    end,
  },
  {
        'nvim-treesitter/nvim-treesitter-textobjects',
        config = function()
            require('nvim-treesitter.configs').setup({
                textobjects = {
                    select = {
                        enable = true,
                        lookahead = true,
                        keymaps = {
                            ["ai"] = "@parameter.inner",
                        },
                    },
                },
            })
        end,
    },
}

------------------------
-- Formatting
------------------------
local formatters = require "lvim.lsp.null-ls.formatters"
formatters.setup {
  { command = "goimports", filetypes = { "go" } },
  { command = "gofumpt", filetypes = { "go" } },
  { command = "buf", filetypes = { "proto" } },
  { command = "rustfmt", filetypes = { "rs" } },
}

-- lvim.autocommands = {
--     {
--         "BufWritePost", -- see `:h autocmd-events`
--         { -- this table is passed verbatim as `opts` to `nvim_create_autocmd`
--             pattern = { "*.sql" }, -- see `:h autocmd-events`
--             command = "!sqlfluff fix -f --disable-progress-bar --FIX-EVEN-UNPARSABLE -q --dialect clickhouse",
--         }
--     },
-- }

lvim.format_on_save = {
  pattern = { "*.go", "*.proto", "*.rs", "*.sql" },
  enabled = true,
}


------------------------
-- Dap
------------------------
local dap_ok, dapgo = pcall(require, "dap-go")
if not dap_ok then
  return
end

dapgo.setup()

-----
-- Linters
-- ---
-- local linters = require "lvim.lsp.null-ls.linters"
-- linters.setup { { command = "sqlfluff", filetypes = { "sql" }, extra_args = {"--dialect", "clickhouse"} } }

------------------------
-- LSP
------------------------
vim.list_extend(lvim.lsp.automatic_configuration.skipped_servers, { "gopls" })

local lsp_manager = require "lvim.lsp.manager"
lsp_manager.setup("golangci_lint_ls", {
  on_init = require("lvim.lsp").common_on_init,
  capabilities = require("lvim.lsp").common_capabilities(),
})
lsp_manager.setup("bufls", {
  on_init = require("lvim.lsp").common_on_init(),
  capabilities = require("lvim.lsp").common_capabilities(),
})

lsp_manager.setup("gopls", {
  on_attach = function(client, bufnr)
    require "lsp_signature".on_attach(signature_setup, bufnr)
    local _, _ = pcall(vim.lsp.codelens.refresh)
    local map = function(mode, lhs, rhs, desc)
      if desc then
        desc = desc
      end

      vim.keymap.set(mode, lhs, rhs, { silent = true, desc = desc, buffer = bufnr, noremap = true })
    end
    map("n", "<leader>Ci", "<cmd>GoInstallDeps<Cr>", "Install Go Dependencies")
    map("n", "<leader>Ct", "<cmd>GoMod tidy<cr>", "Tidy")
    map("n", "<leader>Ca", "<cmd>GoTestAdd<Cr>", "Add Test")
    map("n", "<leader>CA", "<cmd>GoTestsAll<Cr>", "Add All Tests")
    map("n", "<leader>Ce", "<cmd>GoTestsExp<Cr>", "Add Exported Tests")
    map("n", "<leader>Cg", "<cmd>GoGenerate<Cr>", "Go Generate")
    map("n", "<leader>Cf", "<cmd>GoGenerate %<Cr>", "Go Generate File")
    map("n", "<leader>Cc", "<cmd>GoCmt<Cr>", "Generate Comment")
    map("n", "<leader>DT", "<cmd>lua require('dap-go').debug_test()<cr>", "Debug Test")
  end,
  on_init = require("lvim.lsp").common_on_init,
  capabilities = require("lvim.lsp").common_capabilities(),
  settings = {
    gopls = {
      usePlaceholders = true,
      gofumpt = true,
    },
  },
})

local status_ok, gopher = pcall(require, "gopher")
if not status_ok then
  return
end

gopher.setup {
  commands = {
    go = "go",
    gomodifytags = "gomodifytags",
    gotests = "gotests",
    impl = "impl",
    iferr = "iferr",
  },
}

lvim.keys.normal_mode["<c-t>"] = ":sp|te<CR>:resize 11<CR>"
lvim.builtin.which_key.mappings["lb"] = {
  "<cmd>LspRestart<CR>", "Restart"
}
lvim.builtin.which_key.mappings["t"] = {
  "Terminal"
}
lvim.builtin.which_key.mappings["to"] = {
  "<cmd>:sp|te<CR>:resize 11<CR>", "Terminal open"
}
lvim.builtin.which_key.mappings["bq"] = {
  "<cmd>:BufferKill<CR>:q<CR>", "Kill current buffer"
}

lvim.builtin.which_key.mappings["gm"] = {
  "<cmd>:GitConflictListQf<CR>", "Get all conflict to quickfix"
}

-- lvim.keys.normal_mode["<Up>"] = "<Nop>"
-- lvim.keys.normal_mode["<Down>"] = "<Nop>"
-- lvim.keys.normal_mode["<Left>"] = "<Nop>"
-- lvim.keys.normal_mode["<Right>"] = "<Nop>"
-- lvim.keys.insert_mode["<Up>"] = "<Nop>"
-- lvim.keys.insert_mode["<Down>"] = "<Nop>"
-- lvim.keys.insert_mode["<Left>"] = "<Nop>"
-- lvim.keys.insert_mode["<Right>"] = "<Nop>"

vim.opt.relativenumber = true
